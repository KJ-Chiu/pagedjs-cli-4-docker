#!/usr/bin/env node
const program = require('commander');
const Printer = require("../");
const path = require('path');
const fs = require('fs');
const { promisify } = require('util');
const writeFileAsync = promisify(fs.writeFile);
const replaceExt = require('replace-ext');

program
  .version(require('../package.json').version)
  .arguments('[inputPath]')
  .option('-i, --inputs [inputs]', 'Inputs')
  .option('-o, --output [output]', 'Output')
  .option('-d, --debug', 'Debug')
  .option('-l, --landscape', 'Landscape printing', false)
  .option('-s, --page-size [size]', 'Print to Page Size [size]')
  .option('-w, --width [size]', 'Print to Page Width [width] in MM')
  .option('-h --height [size]', 'Print to Page Height [weight] in MM')
  // .option('-m, --page-margin [margin]', 'Print with margin [margin]')
  // .option('-n, --hyphenate [lang]', 'Hyphenate with language [language], defaults to "en-us"')
  // .option('-hi, --hypher_ignore [str]', 'Ignore passed element selectors, such as ".class_to_ignore, h1"')
  // .option('-ho, --hypher_only [str]', 'Only hyphenate passed elements selector, such as ".hyphenate, aside"')
  // .option('-e, --encoding [type]', 'Set the encoding of the input html, defaults to "utf-8"')
  .option('-t, --timeout [ms]', 'Set a max timeout of [ms]')
  .option('-x, --html', 'output html file')
  .parse(process.argv);


let input = program.inputs || program.args[0];

let dir = process.cwd();
let relativePath = path.resolve(dir, input);
let output;
let tmpFile, tmpPath;

let headless = typeof program.debug === "undefined";

// var hyphenator;
// var hyphenateOptions;

if (!input) {
  console.error("You must include an input path");
  return process.exit(1);
}

if (['.html', '.xhtml'].indexOf(path.extname(relativePath)) === -1) {
  console.error("Must pass a html or xhtml file as input");
  return process.exit(1);
}

try {
    fs.accessSync(relativePath, fs.F_OK);
} catch (e) {
    console.error("Input cannot be found", e);
    return process.exit(1);
}

if (typeof(program.output) === "string") {
  output = path.resolve(dir, program.output);
} else if (typeof(program.output) !== "undefined") {
  output = './' + replaceExt(path.basename(input), '.pdf');
} else {
  output = "output.pdf";
}

/*
if (program.hyphenate) {
  hyphenateOptions = {
    ignore: program.hypher_ignore || undefined,
    only: program.hypher_only || undefined,
    encoding: program.encoding || undefined
  }

  tmpPath = replaceExt(relativePath, ".hyphenated.html");

  // tmpFile = temp.openSync({suffix: '.html'});
  // tmpPath = tmpFile.path;
  // Create a new Hyphenator, with passed language
  hyphenator = new Hyphenator(program.hyphenate);
  hyphenator.process(relativePath, tmpPath, hyphenateOptions);

  console.log("Hyphenated for", typeof(program.hyphenate) === "string" ? program.hyphenate : "en-us");

  if (program.debug && tmpPath) {
    console.log("Hyphenated file at:", tmpPath);
  }

}
*/


(async () => {
  let printer = new Printer(headless);

  let file;
  if (headless) {
    let options = {};
    if (program.html) {
      file = await printer.html(input, options);
      output = replaceExt(output, '.html');
    } else {
      file = await printer.pdf(input, options);
    }
  } else {
    printer.preview(input);
  }

  if (file) {
    fs.writeFile(output, file, (err) => {
      if (err) throw err;
      console.log('Saved to', output);
      process.exit(0);
    });
  }
})();
